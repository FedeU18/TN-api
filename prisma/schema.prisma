// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Usuario {
  id_usuario      Int       @id @default(autoincrement())
  nombre          String
  apellido        String
  email           String    @unique
  password        String
  telefono        String
  foto_perfil     String?
  fecha_registro  DateTime  @default(now())
  estado_sesion   Boolean   @default(false)
  rol             String

  // Campos para reset password
  resetPasswordToken   String?
  resetPasswordExpires DateTime?

  pedidosCliente  Pedido[]       @relation("ClientePedidos")
  pedidosRepartidor Pedido[]     @relation("RepartidorPedidos")
  notificaciones  Notificacion[]
  calificacionesCliente Calificacion[] @relation("ClienteCalificaciones")
  calificacionesRepartidor Calificacion[] @relation("RepartidorCalificaciones")
}


model EstadoPedido {
  id_estado     Int       @id @default(autoincrement())
  nombre_estado String    @unique

  pedidos       Pedido[]
}

model Pedido {
  id_pedido      Int           @id @default(autoincrement())
  id_cliente     Int
  id_repartidor  Int?
  direccion_origen   String
  direccion_destino  String
  origen_latitud     Decimal?  @db.Decimal(10,7)
  origen_longitud    Decimal?  @db.Decimal(10,7)
  destino_latitud    Decimal?  @db.Decimal(10,7)
  destino_longitud   Decimal?  @db.Decimal(10,7)
  id_estado      Int
  fecha_creacion DateTime      @default(now())
  fecha_entrega  DateTime?
  qr_codigo      String?
  qr_token       String?       

  cliente        Usuario       @relation("ClientePedidos", fields: [id_cliente], references: [id_usuario])
  repartidor     Usuario?      @relation("RepartidorPedidos", fields: [id_repartidor], references: [id_usuario])
  estado         EstadoPedido  @relation(fields: [id_estado], references: [id_estado])
  ubicaciones    Ubicacion[]
  calificacion   Calificacion?
  notificaciones Notificacion[]
}

model TipoUbicacion {
  id_tipo      Int       @id @default(autoincrement())
  nombre_tipo  String    @unique
  ubicaciones  Ubicacion[]
}

model Ubicacion {
  id_ubicacion Int @id @default(autoincrement())
  id_pedido    Int
  id_tipo      Int
  latitud      Decimal @db.Decimal(10, 7)
  longitud     Decimal @db.Decimal(10, 7)
  fecha_registro DateTime @default(now()) // <-- AGREGAR ESTA LÍNEA

  pedido Pedido @relation(fields: [id_pedido], references: [id_pedido])
  tipo   TipoUbicacion @relation(fields: [id_tipo], references: [id_tipo])
  @@unique([id_pedido, id_tipo])
}

model Calificacion {
  id_calificacion Int      @id @default(autoincrement())
  id_pedido       Int      @unique   // 👈 clave única para relación 1–1
  id_cliente      Int
  id_repartidor   Int
  puntuacion      Int
  comentario      String
  fecha           DateTime @default(now())

  pedido     Pedido  @relation(fields: [id_pedido], references: [id_pedido])
  cliente    Usuario @relation("ClienteCalificaciones", fields: [id_cliente], references: [id_usuario])
  repartidor Usuario @relation("RepartidorCalificaciones", fields: [id_repartidor], references: [id_usuario])
}

model TipoNotificacion {
  id_tipo     Int    @id @default(autoincrement())
  nombre_tipo String  @unique

  notificaciones Notificacion[]
}

model Notificacion {
  id_notificacion Int      @id @default(autoincrement())
  id_pedido       Int
  id_usuario      Int
  mensaje         String
  id_tipo         Int
  fecha_envio     DateTime @default(now())

  pedido          Pedido   @relation(fields: [id_pedido], references: [id_pedido])
  usuario         Usuario  @relation(fields: [id_usuario], references: [id_usuario])
  tipo            TipoNotificacion @relation(fields: [id_tipo], references: [id_tipo])
}